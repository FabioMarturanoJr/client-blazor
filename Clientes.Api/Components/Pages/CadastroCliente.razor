@page "/cadastrar-cliente"
@using Clientes.Api.Domain.Dto
@using Clientes.Api.Domain.Enum
@using Clientes.Api.Service
@using Clientes.Api.Extensions

@inject IClienteService clientService
@inject NavigationManager NavigationManager
@inject IToastService toastService

@using Blazored.Toast.Configuration
@using Blazored.FluentValidation
@using BlazorInputMask
@using Newtonsoft.Json
@using System.Text

@rendermode InteractiveServer

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="10"
                IconType="IconType.Material"
                SuccessIcon="done_outline"
                WarningIcon="warning"
                ShowProgressBar="true" />

<h2>Cadastro de Clientes</h2>

<EditForm Model="@ClienteModel" OnValidSubmit="@AdicionarCliente">
    <FluentValidationValidator />
    <div class="form-group">
        <label for="NomeRazao">Nome do Cliente/Razão Social:</label>
        <InputText @bind-Value="ClienteModel.NomeRazao" class="form-control" id="NomeRazao" />
        <ValidationMessage For="@(() => ClienteModel.NomeRazao)" />
    </div>
    <div class="form-group">
        <label for="Email">E-Mail:</label>
        <InputText @bind-Value="ClienteModel.Email" class="form-control" id="Email" />
        <ValidationMessage For="@(() => ClienteModel.Email)" />

    </div>
    <div class="form-group">
        <label for="Telefone">Telefone:</label>
        <InputMask @bind-Value="ClienteModel.Telefone" class="form-control" data-mask="(00) 00000-0000" id="Telefone" />
        <ValidationMessage For="@(() => ClienteModel.Telefone)" />
    </div>
    <h4>Informações Pessoais</h4>
    <div class="form-group">
        <label for="TipoPessoa">Tipo de Pessoa:</label>
        <InputSelect @bind-Value="ClienteModel.TipoPessoa" class="form-select" id="TipoPessoa">
            <option value=null>Selecione Tipo de Pessoa</option>
            <option value="Fisica">Fisica</option>
            <option value="Juridica">Juridica</option>
        </InputSelect>
        <ValidationMessage For="@(() => ClienteModel.TipoPessoa)" />
    </div>
    @if (ClienteModel.TipoPessoa == TipoPessoaEnum.Fisica.ToString("g"))
    {
        <div class="form-group">
            <label for="Cpf">CPF do Cliente:</label>
            <InputMask @bind-Value="ClienteModel.Cpf" class="form-control" data-mask="000.000.000-00" id="Cpf" />
            <ValidationMessage For="@(() => ClienteModel.Cpf)" />
        </div>
    }
    @if (ClienteModel.TipoPessoa == TipoPessoaEnum.Juridica.ToString("g"))
    {
        <div class="form-group">
            <label for="Cnpj">CNPJ do Cliente:</label>
            <InputMask @bind-Value="ClienteModel.Cnpj" class="form-control" data-mask="00.000.000/0000-00" id="Cnpj" />
            <ValidationMessage For="@(() => ClienteModel.Cnpj)" />
        </div>
    }
    <div class="form-group">
        <label for="Isento">Isento:</label>
        <input type="checkbox" @bind-value="ClienteModel.Isento" id="Isento" />
    </div>
    <div class="form-group">
        <label for="InscricaoEstadual">Inscrição Estadual:</label>
        <InputMask @bind-Value="ClienteModel.InscricaoEstadual" class="form-control" data-mask="000.000.000-000" id="InscricaoEstadual" disabled="@ClienteModel.Isento" />
        <ValidationMessage For="@(() => ClienteModel.InscricaoEstadual)" />
    </div>
    @if (ClienteModel.TipoPessoa == TipoPessoaEnum.Fisica.ToString("g"))
    {
        <label for="InscricaoEstadualPessoaFisica">Inscrição estadual para Pessoa Física:</label>
        <input type="checkbox" @bind-value="ClienteModel.InscricaoEstadualPessoaFisica" id="InscricaoEstadualPessoaFisica" disabled="@ClienteModel.Isento" />
        <div class="form-group">
            <label for="Genero">Genero:</label>
            <InputSelect @bind-Value="ClienteModel.Genero" class="form-select" id="Genero">
                <option value=null>Selecione o Genero</option>
                <option value="Masculino">Masculino</option>
                <option value="Feminino">Feminino</option>
                <option value="Outro">Outro</option>
            </InputSelect>
            <ValidationMessage For="@(() => ClienteModel.Genero)" />
        </div>
        <div class="form-group">
            <label for="DataNascimento">Data de Nascimento:</label>
            <InputDate @bind-Value="ClienteModel.DataNascimento" class="form-control" id="DataNascimento" />
            <ValidationMessage For="@(() => ClienteModel.DataNascimento)" />
        </div>
    }
    <div class="form-group">
        <label for="Bloqueado">Cliente Bloqueado:</label>
        <InputSelect @bind-Value="ClienteModel.Bloqueado" class="form-select" id="Bloqueado">
            <option value=false>Não</option>
            <option value=true>Sim</option>
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="Senha">Senha:</label>
        <InputText @bind-Value="ClienteModel.Senha" class="form-control" id="Senha" />
        <ValidationMessage For="@(() => ClienteModel.Senha)" />
        <label for="ConfirmaSenha">Confirmar Senha:</label>
        <InputText @bind-Value="ClienteModel.ConfirmaSenha" class="form-control" id="ConfirmaSenha"/>
        <ValidationMessage For="@(() => ClienteModel.ConfirmaSenha)" />

    </div>
    <br/>
    <div class="form-group">
        <input type="submit" class="btn btn-primary" value="Salvar" />
        <NavLink class="btn btn-danger" href="">
            Cancelar
        </NavLink>
    </div>
</EditForm>


@code {
    private CreateClienteDto ClienteModel = new CreateClienteDto();
    private bool ExisteEmail = false;
    private bool ExisteCpfCnpj = false;
    private bool ExisteInscricaoEstadual = false;

    private void AdicionarCliente()
    {
        try
        {
            clientService.CadastraCliente(ClienteModel);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("ErroCadastro"))
            {
                var jsonErroString = ex.Message.Split(";")[1..];
                var errors = JsonConvert.DeserializeObject<List<string>>(jsonErroString[0]);
                foreach (var error in errors!)
                {
                    toastService.ShowError(Encoding.UTF8.GetString(Encoding.Default.GetBytes(error)));
                }
            }
        }
    }
}



